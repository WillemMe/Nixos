# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/profiles/qemu-guest.nix")
    ];

   # Boot settings: clean /tmp/, latest kernel and enable bootloader
  boot = {
        initrd.availableKernelModules = [ "ahci" "xhci_pci" "virtio_pci" "sr_mod" "virtio_blk" ];
        initrd.kernelModules = [ ];
        initrd.secrets = {"/boot/crypto_keyfile.bin" = null; };
        kernelModules = [ "kvm-intel" ];
        extraModulePackages = [ ];
        tmp.cleanOnBoot = true;
        loader = {
            
        #systemd-boot.enable = true;
        #systemd-boot.editor = false;
        #efi.canTouchEfiVariables = true;
        #timeout = 0;
            grub = {
             enable = true;
             enableCryptodisk = true;
             device = "/dev/vda";
             useOSProber = true;
             };
        };
    };



  fileSystems."/" =
    { device = "/dev/disk/by-uuid/65f8e2bf-4d57-474e-b433-439014687286";
      fsType = "ext4";
    };

  boot.initrd.luks.devices."luks-0e57065f-e9b8-4a8e-886f-b8640e15e770".device = "/dev/disk/by-uuid/0e57065f-e9b8-4a8e-886f-b8640e15e770";
  boot.initrd.luks.devices."luks-0e57065f-e9b8-4a8e-886f-b8640e15e770".keyFile = "/boot/crypto_keyfile.bin";
  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}
